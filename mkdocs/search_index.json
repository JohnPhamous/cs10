{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS10 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nGeneral Info\n\n\n\n\nInstructors:\n Kris Miller [001, 002, 003], Kelly Downey [004, 010V-1], and Adam Koehler [005]\n\n\nCourse:\n CS10\n\n\nSI Leaders:\n Michael Evans, Robyn Haley, Guthrie Price, and Andre Castro\n\n\nWebsite:\n \nCS10 SI\n\n\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nAnyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.\n\n\nHowever, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.\n\n\nWith that in mind, I should mention that SI is required for learning community students.\nIf you are not attending, you will be dropped from your learning community.\n\n\nGuidelines:\n\n\n\n\nBe respectful - This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate - You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water - This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.\n\n\nSign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs10-si", 
            "text": "This is where all of the labs will be posted.", 
            "title": "Welcome to CS10 SI!"
        }, 
        {
            "location": "/#general-info", 
            "text": "Instructors:  Kris Miller [001, 002, 003], Kelly Downey [004, 010V-1], and Adam Koehler [005]  Course:  CS10  SI Leaders:  Michael Evans, Robyn Haley, Guthrie Price, and Andre Castro  Website:   CS10 SI", 
            "title": "General Info"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "Anyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.  However, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.  With that in mind, I should mention that SI is required for learning community students.\nIf you are not attending, you will be dropped from your learning community.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful - This includes silencing your cell phones and not using them during sessions.  Participate - You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water - This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.  Sign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/lab01/", 
            "text": "iostream\n\n\niostream\n is the library you use to do input and output.\n\n\nThe most important parts to us this week are \ncin\n and \ncout\n.\n\n\ncin\n is used for \nkeyboard input\n, and \ncout\n is used for \ncharacter output\n.\n\n\nYour first program\n\n\n#include \niostream\n\nusing namespace std;\n\nint main() {\n    cout \n \nHello world!\n \n endl;\n    return 0;\n}\n\n\n\n\nThe first line of code enables \ninput and output\n.\n\n\nThe second line is magic.\nIgnore it for now.\n\n\nThe fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.\n\n\nThe fifth line prints \"Hello world!\" to the user's screen.\n\n\nThe sixth line stops the execution of this function, and says that everything went ok (the value 0).\n\n\nExercise 1\n\n\nWrite a story!\n\n\nGet into groups, and spend 10-15 minutes creating a story.\n\n\n\n\nWhat do we see when we're introduced to the world?\n\n\nWho's around?\n\n\nWhy are things the way they are?\n\n\n\n\nMake sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.\n\n\nMake sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!\n\n\nIf you want a challenge, start a new line every 80 \noutput\n characters\n(notice that output characters don't necessarily line up with the code).\n\n\nExercise 2\n\n\nShow me your ascii art!\n\n\nGoogle \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!\n\n\nExercise 3 (optional)\n\n\nWrite an interactive story!\n\n\nYou can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.\n\n\nNext, come up with 10 decisions our main character has to make.\n\n\nAfter you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.\n\n\nAlso, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.\n\n\nThis activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.\n\n\nQuiz!\n\n\nquiz01\n\n\nAnswers\n\n\nThe answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!", 
            "title": "Lab 1: Input and Output"
        }, 
        {
            "location": "/lab01/#iostream", 
            "text": "iostream  is the library you use to do input and output.  The most important parts to us this week are  cin  and  cout .  cin  is used for  keyboard input , and  cout  is used for  character output .", 
            "title": "iostream"
        }, 
        {
            "location": "/lab01/#your-first-program", 
            "text": "#include  iostream \nusing namespace std;\n\nint main() {\n    cout    Hello world!    endl;\n    return 0;\n}  The first line of code enables  input and output .  The second line is magic.\nIgnore it for now.  The fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.  The fifth line prints \"Hello world!\" to the user's screen.  The sixth line stops the execution of this function, and says that everything went ok (the value 0).", 
            "title": "Your first program"
        }, 
        {
            "location": "/lab01/#exercise-1", 
            "text": "Write a story!  Get into groups, and spend 10-15 minutes creating a story.   What do we see when we're introduced to the world?  Who's around?  Why are things the way they are?   Make sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.  Make sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!  If you want a challenge, start a new line every 80  output  characters\n(notice that output characters don't necessarily line up with the code).", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab01/#exercise-2", 
            "text": "Show me your ascii art!  Google \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab01/#exercise-3-optional", 
            "text": "Write an interactive story!  You can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.  Next, come up with 10 decisions our main character has to make.  After you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.  Also, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.  This activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.", 
            "title": "Exercise 3 (optional)"
        }, 
        {
            "location": "/lab01/#quiz", 
            "text": "quiz01", 
            "title": "Quiz!"
        }, 
        {
            "location": "/lab01/#answers", 
            "text": "The answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!", 
            "title": "Answers"
        }, 
        {
            "location": "/dis02/", 
            "text": "Introduction\n\n\nA variable is a\n\nnamed location in memory\n.\nThe name we give a variable is called an\n\nidentifier\n.\n\n\nVariables can be assigned to using the\n\n=\n operator.\n\n\nIn c++, \n* / % + -\n are mathematical operators, and can be used to\n\nmultiply\n,\n\ndivide\n,\n\nmodulo\n,\n\nadd\n, and\n\nsubtract\n two numbers, respectively.\n\n\nc++ math operators behave according to precedence.\n\n(\n)\n\nhas the highest precedence.\nNext is\n\n * / % \n,\nand they have the same precedence.\nLast are\n\n+\n\nand\n\n-\n;\nThey have the same precedence.\n\n\nWhen an expression has multiple operators of the same precedence, they are evaluated\n\nleft to right\n.\nFor instance, 4/1/2==(4/1)/2, and \nnot\n 4/(1/2).\n\n(the second would be a problem)\n\n\nArithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4==\n0\n.\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.\n\n\nBecause \nint\n only stores\n\nintegers\n,\nall fractional information is lost.\nIf you want to do math with fractional information included, use\n\ndouble\n.\n\n\nThe \nstring\n is used to store text information.\nA string can be thought of as a collection of\n\ncharacters\n.\n\n\nLastly, and most importantly, \n\nFOLLOW THE STYLE GUIDELINES\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.\n\n\n// 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout \n temp3 \n endl;\n    cout \n temp/ temp2 \n endl;\n\n    temp = temp2;\n    cout \n temp \n endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout \n temp3 \n \n, \n \n temp \n endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout \n temp4 + temp6 \n endl;\n    temp7 -= temp5;\n    cout \n temp7 \n endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake = \njake\n;\n    string james = \njames\n;\n    char a = 'a';\n\n    jake = james;\n    cout \n jake \n endl;\n    jake = jake + james;\n    cout \n jake \n endl;\n\n    jake = \nj\n;\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout \n jake \n endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout \n static_cast\nchar\n(letter + static_cast\nint\n(dbl) * 2 - intgr * 2.5);\n    cout \n static_cast\nchar\n((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout \n \n \n \n intgr % 11 + 1;\n    string temp = \n;\n    temp += static_cast\nchar\n(intgr + 12);\n    temp += static_cast\nchar\n(letter + static_cast\nint\n(dbl) - 1.67);\n    temp += (18+ letter);\n    cout \n temp \n \n awesome!\n \n endl;\n\n    return 0;\n}\n\n\n\n\nExtra Help\n\n\n\n\ntype conversion specifics:\n\n\nstandard math library\n\n\nthe space character \n' '\n has an value of 32", 
            "title": "Discussion 2: Variables and Math"
        }, 
        {
            "location": "/dis02/#introduction", 
            "text": "A variable is a named location in memory .\nThe name we give a variable is called an identifier .  Variables can be assigned to using the =  operator.  In c++,  * / % + -  are mathematical operators, and can be used to multiply , divide , modulo , add , and subtract  two numbers, respectively.  c++ math operators behave according to precedence. ( ) \nhas the highest precedence.\nNext is  * / %  ,\nand they have the same precedence.\nLast are + \nand - ;\nThey have the same precedence.  When an expression has multiple operators of the same precedence, they are evaluated left to right .\nFor instance, 4/1/2==(4/1)/2, and  not  4/(1/2). (the second would be a problem)  Arithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4== 0 .\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.  Because  int  only stores integers ,\nall fractional information is lost.\nIf you want to do math with fractional information included, use double .  The  string  is used to store text information.\nA string can be thought of as a collection of characters .  Lastly, and most importantly,  FOLLOW THE STYLE GUIDELINES .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis02/#code-tracing", 
            "text": "What does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.  // 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout   temp3   endl;\n    cout   temp/ temp2   endl;\n\n    temp = temp2;\n    cout   temp   endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout   temp3    ,     temp   endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout   temp4 + temp6   endl;\n    temp7 -= temp5;\n    cout   temp7   endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake =  jake ;\n    string james =  james ;\n    char a = 'a';\n\n    jake = james;\n    cout   jake   endl;\n    jake = jake + james;\n    cout   jake   endl;\n\n    jake =  j ;\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout   jake   endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout   static_cast char (letter + static_cast int (dbl) * 2 - intgr * 2.5);\n    cout   static_cast char ((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout         intgr % 11 + 1;\n    string temp =  ;\n    temp += static_cast char (intgr + 12);\n    temp += static_cast char (letter + static_cast int (dbl) - 1.67);\n    temp += (18+ letter);\n    cout   temp     awesome!    endl;\n\n    return 0;\n}", 
            "title": "Code tracing"
        }, 
        {
            "location": "/dis02/#extra-help", 
            "text": "type conversion specifics:  standard math library  the space character  ' '  has an value of 32", 
            "title": "Extra Help"
        }, 
        {
            "location": "/lab02/", 
            "text": "Exercise 1\n\n\nAsk the user for 2 numbers, then divide them and show the result.\n\n\nExample:\n\n\n\n\nEnter the dividend: \n4\n\nEnter the divisor: \n2\n\n4 / 2 == 2\n\n\n\n\nExercise 2\n\n\nUsing a combination of math, the datatypes \ndouble\n and \nint\n, and/or type casting, write a program that performs floating point modulus.\n\n\nHere's a hint:\n\n\n\n\nFor two positive integers P and Q where P \n= Q,\n\nP can be expressed as Q*D + R\n\nD is some divisor of Q\n\nR is the remainder (and is always less than Q)\n\n\n\n\nDon't worry about negative floating point values.\n\n\nExamples:\n\n\n\n\nEnter the dividend: \n23.4\n\nEnter the divisor: \n3.2\n\n23.4 % 3.2 == 1\n\n\nEnter the dividend: \n54.7\n\nEnter the divisor: \n3.14\n\n54.7 % 3.14 == 1.32\n\n\n\n\nExercise 3\n\n\nGet a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is \nchar\n.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in decimal is 99.\n\n\n\n\nExercise 4\n\n\nGet a 5-letter word from the user.\nThen, convert it to the proper capitalization (first letter is capitalized, and the rest are lowercase).\n\n\nExample:\n\n\n\n\nEnter a 5-letter word: \nhElLo\n\nYour word is Hello.\n\n\n\n\nExercise 5 (advanced)\n\n\nUse modulus and division to print the binary value of a character.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in binary is 01100011.\n\n\n\n\nHint: once you have the decimal value of a character [part 3],\nyou can google something like \"\n99 in binary\n\"\nto double-check your results.\nAlso, characters all have 8 bits.\n\n\n\n\n\nQuiz!\n\n\nquiz02", 
            "title": "Lab 2: Variables and Math"
        }, 
        {
            "location": "/lab02/#exercise-1", 
            "text": "Ask the user for 2 numbers, then divide them and show the result.  Example:   Enter the dividend:  4 \nEnter the divisor:  2 \n4 / 2 == 2", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab02/#exercise-2", 
            "text": "Using a combination of math, the datatypes  double  and  int , and/or type casting, write a program that performs floating point modulus.  Here's a hint:   For two positive integers P and Q where P  = Q, \nP can be expressed as Q*D + R \nD is some divisor of Q \nR is the remainder (and is always less than Q)   Don't worry about negative floating point values.  Examples:   Enter the dividend:  23.4 \nEnter the divisor:  3.2 \n23.4 % 3.2 == 1  Enter the dividend:  54.7 \nEnter the divisor:  3.14 \n54.7 % 3.14 == 1.32", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab02/#exercise-3", 
            "text": "Get a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is  char .  Example:   Enter a character:  c \n'c' in decimal is 99.", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab02/#exercise-4", 
            "text": "Get a 5-letter word from the user.\nThen, convert it to the proper capitalization (first letter is capitalized, and the rest are lowercase).  Example:   Enter a 5-letter word:  hElLo \nYour word is Hello.", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/lab02/#exercise-5-advanced", 
            "text": "Use modulus and division to print the binary value of a character.  Example:   Enter a character:  c \n'c' in binary is 01100011.   Hint: once you have the decimal value of a character [part 3],\nyou can google something like \" 99 in binary \"\nto double-check your results.\nAlso, characters all have 8 bits.", 
            "title": "Exercise 5 (advanced)"
        }, 
        {
            "location": "/lab02/#quiz", 
            "text": "quiz02", 
            "title": "Quiz!"
        }, 
        {
            "location": "/dis03/", 
            "text": "Introduction\n\n\nA variable of \nchar\n type can store a\n\nsingle character\n.\n\nCharacter literals must be declared using\n\nsingle quotes\n.\n\n\nASCII\n\nis a standard for encoding characters to numbers.\n\nAn\n\nescape sequence\n\nis a two-character sequence that represent a special character. Example: \n'\\n'\n\n\nAn initialized variable whose value cannot change is called a \n\n\nconstant variable\n.\n\n\nAn \n\noverflow\n\noccurs when the value being assigned to a variable is greater than the maximum value the variable can store.\n\n\nWhen debugging error messages from compilation, start from the\n\ntop\n\nof the error messages and work \n\ndown\n\nrecompiling after each message.\n\n\nA \nbool\n stores a\n\ntrue\\false value\n.\n\n\nBraces {}\n\nsurround a branch's statements.\n\n\nParentheses ()\n\nsurround a branch's conditions.\n\nIf-else statements within other if/else statements are called: \n\n\nnested if-else statements\n.\n\n\nThe 6 relational and equality operators are:\n\n, \n, \n=, \n=, ==, !=\n.\n\nThese relational operators evaluate to a\n\nboolean value\n.\n\n\nThe 3 logical operators are:\n\n, ||, !\n.\n\n\n is true when \n\nboth of its operands are true\n.\n\n\n||\n is true when\n\nat least one of its operands are true\n.\n\n\n!\n is true when\n\nits operand is false\n.\n\n\nThe order of evaluation for logical/relational operators is: \n\n\n()\n\n,\n\n!\n\n,\n\n* \\ % + -\n\n,\n\n \n= \n \n=\n\n,\n\n== !=\n\n,\n\n\n,\n\n|\n\n,\n\n\n,\n\n||\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.\n\n\n// 1\nint main() {\n    char c1 = 'a';\n    char c2 = c1 - 32;\n\n    cout \n c1 \n ' ' \n c2 \n endl;\n\n    c1 += 1;\n    c2 += 1;\n\n    cout \n c1 \n ' ' \n c2 \n endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n\n    if(i \n k) {\n        i *= k;\n    }\n\n    if (j \n i) {\n        j *= i;\n    }\n    else {\n        j /= 5;\n    }\n\n    if (j * 3 \n -k) {\n        k = -k / 3;\n    }\n    else if (j * 3 \n= -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (i \n 0) {\n        i = k;\n    }\n    else if (k \n 0) {\n        k = i;\n    }\n    else if (j \n 0) {\n        j = i;\n    }\n\n    cout \n \ni = \n \n i \n endl;\n    cout \n \nj = \n \n j \n endl;\n    cout \n \nk = \n \n k \n endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i \n k \n !b1) {\n        i *= k;\n    }\n\n    if (j \n i \n b1) {\n        j *= i;\n    }\n    else {\n        j /= 5;\n    }\n\n    if (!(j * 3 \n -k)) {\n        k = -k / 3;\n    }\n    else if (j * 3 \n= -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i \n 0) || (j - i \n 0)) {\n        i = k;\n    }\n    else if (((k \n 0) \n !(-k \n 0)) || b1) {\n        k = i;\n    }\n    else if (!(j \n 0) || (i - j \n 0)) {\n        j = i;\n    }\n\n    cout \n \ni = \n \n i \n endl;\n    cout \n \nj = \n \n j \n endl;\n    cout \n \nk = \n \n k \n endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i \n k \n b1) {\n        if (-i \n -k || !b1) {\n            k += 5;\n        }\n        i *= k;\n    }\n\n    if (j \n= i) {\n        if (j == i) {\n            j -= 6;\n        }\n        j /= i;\n    }\n    else {\n        if (j \n k \n j \n i) {\n            j -= 1;\n        }\n        j *= 5;\n    }\n\n    if (j * 3 \n k) {\n        if (!(j * 3 \n= -k)) {\n            b1 = !b1;\n        }\n        k = -k * 3;\n    }\n    else if (j * 3 \n= -k || b1) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i \n 0) || (j - i \n 0)) {\n        i = k;\n        if (i == k) {\n            k += 6;\n        }\n    }\n    else if (((k \n 0) \n !(-k \n 0)) || b1) {\n        k = i;\n        if (b1) {\n            i += 6;   \n        }\n    }\n    else if (!(j \n 0) || (i - j \n 0)) {\n        j = i;\n        if (b1) {\n            j += 6;\n        }\n        else if (b1 || !b1) {\n            i += 3;\n        }\n    }\n\n    cout \n \ni = \n \n i \n endl;\n    cout \n \nj = \n \n j \n endl;\n    cout \n \nk = \n \n k \n endl;\n\n    return 0;\n}\n\n\n\n\nExtra Help\n\n\n\n\nASCII Table", 
            "title": "Discussion 3: Characters and Branches"
        }, 
        {
            "location": "/dis03/#introduction", 
            "text": "A variable of  char  type can store a single character . \nCharacter literals must be declared using single quotes .  ASCII \nis a standard for encoding characters to numbers. \nAn escape sequence \nis a two-character sequence that represent a special character. Example:  '\\n'  An initialized variable whose value cannot change is called a   constant variable .  An  overflow \noccurs when the value being assigned to a variable is greater than the maximum value the variable can store.  When debugging error messages from compilation, start from the top \nof the error messages and work  down \nrecompiling after each message.  A  bool  stores a true\\false value .  Braces {} \nsurround a branch's statements.  Parentheses () \nsurround a branch's conditions. \nIf-else statements within other if/else statements are called:   nested if-else statements .  The 6 relational and equality operators are: ,  ,  =,  =, ==, != . \nThese relational operators evaluate to a boolean value .  The 3 logical operators are: , ||, ! .   is true when  both of its operands are true .  ||  is true when at least one of its operands are true .  !  is true when its operand is false .  The order of evaluation for logical/relational operators is:   () \n, ! \n, * \\ % + - \n,   =    = \n, == != \n, \n, | \n, \n, ||", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis03/#code-tracing", 
            "text": "What does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.  // 1\nint main() {\n    char c1 = 'a';\n    char c2 = c1 - 32;\n\n    cout   c1   ' '   c2   endl;\n\n    c1 += 1;\n    c2 += 1;\n\n    cout   c1   ' '   c2   endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n\n    if(i   k) {\n        i *= k;\n    }\n\n    if (j   i) {\n        j *= i;\n    }\n    else {\n        j /= 5;\n    }\n\n    if (j * 3   -k) {\n        k = -k / 3;\n    }\n    else if (j * 3  = -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (i   0) {\n        i = k;\n    }\n    else if (k   0) {\n        k = i;\n    }\n    else if (j   0) {\n        j = i;\n    }\n\n    cout    i =     i   endl;\n    cout    j =     j   endl;\n    cout    k =     k   endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i   k   !b1) {\n        i *= k;\n    }\n\n    if (j   i   b1) {\n        j *= i;\n    }\n    else {\n        j /= 5;\n    }\n\n    if (!(j * 3   -k)) {\n        k = -k / 3;\n    }\n    else if (j * 3  = -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i   0) || (j - i   0)) {\n        i = k;\n    }\n    else if (((k   0)   !(-k   0)) || b1) {\n        k = i;\n    }\n    else if (!(j   0) || (i - j   0)) {\n        j = i;\n    }\n\n    cout    i =     i   endl;\n    cout    j =     j   endl;\n    cout    k =     k   endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i   k   b1) {\n        if (-i   -k || !b1) {\n            k += 5;\n        }\n        i *= k;\n    }\n\n    if (j  = i) {\n        if (j == i) {\n            j -= 6;\n        }\n        j /= i;\n    }\n    else {\n        if (j   k   j   i) {\n            j -= 1;\n        }\n        j *= 5;\n    }\n\n    if (j * 3   k) {\n        if (!(j * 3  = -k)) {\n            b1 = !b1;\n        }\n        k = -k * 3;\n    }\n    else if (j * 3  = -k || b1) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i   0) || (j - i   0)) {\n        i = k;\n        if (i == k) {\n            k += 6;\n        }\n    }\n    else if (((k   0)   !(-k   0)) || b1) {\n        k = i;\n        if (b1) {\n            i += 6;   \n        }\n    }\n    else if (!(j   0) || (i - j   0)) {\n        j = i;\n        if (b1) {\n            j += 6;\n        }\n        else if (b1 || !b1) {\n            i += 3;\n        }\n    }\n\n    cout    i =     i   endl;\n    cout    j =     j   endl;\n    cout    k =     k   endl;\n\n    return 0;\n}", 
            "title": "Code tracing"
        }, 
        {
            "location": "/dis03/#extra-help", 
            "text": "ASCII Table", 
            "title": "Extra Help"
        }, 
        {
            "location": "/lab03/", 
            "text": "Exercise 1\n\n\nTake in a letter from the user as a \nchar\n, and display its integer equivalent.\nThen display the uppercase version of the letter and its integer equivalent.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in decimal is 99.\n\n'C' in decimal is 67.\n\n\n\n\nHint:\n\n\n\n\nCheck out an ASCII table to see distance between upper and lowercase letters. \n\n\nASCII Table\n\n\n\n\nExercise 2\n\n\nTake in a 5-letter word from the user.\n\nThen, convert the word to the proper capitalization (first letter is capitalized, and the rest lowercase).\n\n\nExample:\n\n\n\n\nEnter a 5-letter word: \nhElLo\n\nYour word is Hello.\n\n\n\n\nExercise 3\n\n\nCreate a program which will guess what number the user is thinking of (between 1 and 5) in as few guesses as possible.\n\n\nExample:\n\n\n\n\nIs your number greater than, less than, or equal to 3?\n\n\ngreater\n\nIs your number less than, or equal to 5?\n\n\nequal\n\nI got it! Your number is 5!\n\n\n\n\nExercise 4\n\n\nTake in a number from the user (between -50 and 50) then output between which multiples of 10 the number is between and whether it is positive or negative.\nIf the number is 0, simply output that the number was 0. \nIf the number is a multiple of 10, output that the number was a positive/negative multiple of 10. \n\n\nExample 1:\n\n\n\n\nEnter a number: \n-37\n\nYour number is negative and between -30 and -40\n\n\n\n\nExample 2:\n\n\n\n\nEnter a number: \n40\n\nYour number is a positive multiple of 10\n\n\n\n\nExample 3:\n\n\n\n\nEnter a number: \n0\n\nYour number is 0\n\n\n\n\nExercise 5\n\n\nTake in how much money (integer) the user has.\n\nThen take in 4 items from the user.\n\nEach item should have a name (string), cost (integer), and appeal (integer).\n\nThen output which item the user should buy with appeal being of highest priority followed by lowest cost.\n\nDo not reccomend the user to buy an item they cannot afford.\n\n\nExample:\n\n\n\n\nEnter how much money you have: \n3\n\nEnter the name, cost, and appeal of your first item: \nDoritoes 3 3\n\nEnter the name, cost, and appeal of your second item: \nLays 1 2\n\nEnter the name, cost, and appeal of your third item: \nCheetos 3 4\n\nEnter the name, cost, and appeal of your fourth item: \nPringles 4 5\n\nYou should buy the Cheetos\n\n\n\n\nQuiz!\n\n\nquiz03", 
            "title": "Lab 3: Characters and Branches"
        }, 
        {
            "location": "/lab03/#exercise-1", 
            "text": "Take in a letter from the user as a  char , and display its integer equivalent.\nThen display the uppercase version of the letter and its integer equivalent.  Example:   Enter a character:  c \n'c' in decimal is 99. \n'C' in decimal is 67.   Hint:   Check out an ASCII table to see distance between upper and lowercase letters.   ASCII Table", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab03/#exercise-2", 
            "text": "Take in a 5-letter word from the user. \nThen, convert the word to the proper capitalization (first letter is capitalized, and the rest lowercase).  Example:   Enter a 5-letter word:  hElLo \nYour word is Hello.", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab03/#exercise-3", 
            "text": "Create a program which will guess what number the user is thinking of (between 1 and 5) in as few guesses as possible.  Example:   Is your number greater than, less than, or equal to 3?  greater \nIs your number less than, or equal to 5?  equal \nI got it! Your number is 5!", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab03/#exercise-4", 
            "text": "Take in a number from the user (between -50 and 50) then output between which multiples of 10 the number is between and whether it is positive or negative.\nIf the number is 0, simply output that the number was 0. \nIf the number is a multiple of 10, output that the number was a positive/negative multiple of 10.   Example 1:   Enter a number:  -37 \nYour number is negative and between -30 and -40   Example 2:   Enter a number:  40 \nYour number is a positive multiple of 10   Example 3:   Enter a number:  0 \nYour number is 0", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/lab03/#exercise-5", 
            "text": "Take in how much money (integer) the user has. \nThen take in 4 items from the user. \nEach item should have a name (string), cost (integer), and appeal (integer). \nThen output which item the user should buy with appeal being of highest priority followed by lowest cost. \nDo not reccomend the user to buy an item they cannot afford.  Example:   Enter how much money you have:  3 \nEnter the name, cost, and appeal of your first item:  Doritoes 3 3 \nEnter the name, cost, and appeal of your second item:  Lays 1 2 \nEnter the name, cost, and appeal of your third item:  Cheetos 3 4 \nEnter the name, cost, and appeal of your fourth item:  Pringles 4 5 \nYou should buy the Cheetos", 
            "title": "Exercise 5"
        }, 
        {
            "location": "/lab03/#quiz", 
            "text": "quiz03", 
            "title": "Quiz!"
        }, 
        {
            "location": "/dis04/", 
            "text": "Introduction\n\n\nYou can check if two strings are equal by using the\n\n== or !=\n\noperators.\nFor two strings to be considered equal, they must have the same number of\n\ncharacters\n\nand each corresponding character must be\n\nidentical\n.\n\n\nThe operators\n\n, \n=, \n, \n=\n\ncan also be used to order strings \n\nvalues\n.\n\n\nThe string accessor function \n.at(i)\n returns\n\na character\n\nat the ith value of the string\nThe string accessor function \n.size()\n returns\n\nthe number of chars in the string\n\nor the length of the string.\n\nsubstr(i,j)\n would split a string into a substring from index\n\ni\n\nand until index\n\ni+j\n\n\ntoupper('c')\n and \ntolower('C')\n are char functions that return the\n\nlowercase and uppercase\n\nof the character arguments, respectively.\n\n\nFloating point numbers should not be compared using \n==\n because they are sometimes not\n\nprecise\n\nenough.\nInstead, to compare to floating point variables \nf1\n and \nf2\n where \nf1 \n f2\n, make sure to use a formula similar to the following:\n\n(f1-f2)\n.00001\n.\n\n\nLoops allow you to control the\n\nflow\n\nof your program by repeating actions.\nEach loop style contains a condition section.\nThe block will execute as long as the provided condition evaluates to\n\ntrue\n.\n\n\nOne type of loop that is visually similar to an \nif\n statement is a \n\nwhile\n\nloop.\nBoth contain a single expression that evaluates to \ntrue\n or \nfalse\n.\nThis expression determines whether or not the body of the loop will be\n\nexecuted\n.\n\n\nA while loop will continue to execute until\n\nits conditional expression evaluates to false\n.\nThe condition of a while loop evaluates once per iteration of the loop.\n\n\nfor\n loops are similar to \nwhile\n loops.\nFor loops are composed of\n\nan initialization statement\n,\n\na conditional expression\n, and\n\nan update action\n.\nThe conditional expression of a \nfor\n loop is evaluated\n\nbefore\n\nthe body is executed.\n\n\nAlthough \nfor\n and \nwhile\n loops can be used interchangeably, each is stylistically better suited for different tasks.\nA \nfor\n loop should be used when the number of loop iterations is\n\nknown\n.\nA \nwhile\n loop should be used when the number of loop iterations is\n\nunknown\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\n\n\n// 1\nint main() {\n    string Z = \nZ\n;\n    string a = \na\n;\n\n    if (Z \n a) {\n        cout \n \n'Z' comes before 'a' lexicographically\n \n endl;\n    }\n    else {\n        cout \n \n'a' comes before 'Z' lexicographically\n \n endl;\n    }\n\n    Z.append(\nebra\n);\n    cout \n \nLength = \n \n Z.length() \n endl;\n    cout \n \nSize = \n \n Z.size() \n endl;\n\n    Z.clear();\n    cout \n \nLength = \n \n Z.size() \n endl;\n\n    Z = \nhello\n;\n    cout \n Z.at(0) \n a \n Z.at(2) \n Z.at(4) \n endl;\n\n    Z.insert(0,\nc\n);\n    cout \n Z \n endl;\n\n    cout \n Z.substr(1,2) \n \n is awesome.\n \n endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int counter = 0;\n    int counter2 = 0;\n\n    for (int i = 0; i \n 5; i++) {\n        counter += 1;\n    }\n    cout \n counter \n endl;\n\n    for (int i = 0; i \n 4; i++) {\n        counter *= 2;\n    }\n    cout \n counter \n endl;\n\n    counter = counter / 10;\n\n    for (int i = 28; i \n counter; i = i - 2) {\n        cout \n counter2;\n        counter2++;\n    }\n    cout \n endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    bool b = true;\n    int a = 0;\n\n    while (b) {\n        cout \n a;\n        if (a == 5) {\n            b = false;\n        }\n        a++;\n    }\n    cout \n endl;\n\n    a = 0;\n\n    while (!b) {\n        a++;\n        if (a == 5){\n            b = true;\n        }\n        cout \n a \n endl;\n    }\n\n    double d = 12345;\n\n    while (d \n= 1) {\n        d = d / 10;\n    }\n    cout \n d \n endl;\n\n    string s = \nComputer\n;\n\n    while(s.size() != 0) {\n        cout \n s \n endl;\n        s.resize(s.size() - 1);\n    }\n\n    return 0;\n}\n\n// 4\n// FOR THESE QUESTIONS, how many times does each loop run?\nint main() {\n    // Loop A\n    for (int i = 0; i \n 10; i++) {\n        if (i \n 5) {\n            i *= 2;\n        }\n    }\n\n    int j = 10;\n\n    // Loop B\n    while (j != 0) {\n        if (j \n 0) {\n            j -= 3;\n        }\n        if (j \n 0) {\n            j += 5;\n        }\n    }\n\n    // Loop C\n    for (int i = 0; i \n 30; i++) {\n        if (i % 3 == 2) {\n            i += 10;\n        }\n        else if (i % 3 == 1) {\n            i *= 2;\n        }\n        else {\n            i /= 3;\n        }\n    }\n\n    return 0;\n}", 
            "title": "Discussion 4: Strings and Loops"
        }, 
        {
            "location": "/dis04/#introduction", 
            "text": "You can check if two strings are equal by using the == or != \noperators.\nFor two strings to be considered equal, they must have the same number of characters \nand each corresponding character must be identical .  The operators ,  =,  ,  = \ncan also be used to order strings  values .  The string accessor function  .at(i)  returns a character \nat the ith value of the string\nThe string accessor function  .size()  returns the number of chars in the string \nor the length of the string. substr(i,j)  would split a string into a substring from index i \nand until index i+j  toupper('c')  and  tolower('C')  are char functions that return the lowercase and uppercase \nof the character arguments, respectively.  Floating point numbers should not be compared using  ==  because they are sometimes not precise \nenough.\nInstead, to compare to floating point variables  f1  and  f2  where  f1   f2 , make sure to use a formula similar to the following: (f1-f2) .00001 .  Loops allow you to control the flow \nof your program by repeating actions.\nEach loop style contains a condition section.\nThe block will execute as long as the provided condition evaluates to true .  One type of loop that is visually similar to an  if  statement is a  while \nloop.\nBoth contain a single expression that evaluates to  true  or  false .\nThis expression determines whether or not the body of the loop will be executed .  A while loop will continue to execute until its conditional expression evaluates to false .\nThe condition of a while loop evaluates once per iteration of the loop.  for  loops are similar to  while  loops.\nFor loops are composed of an initialization statement , a conditional expression , and an update action .\nThe conditional expression of a  for  loop is evaluated before \nthe body is executed.  Although  for  and  while  loops can be used interchangeably, each is stylistically better suited for different tasks.\nA  for  loop should be used when the number of loop iterations is known .\nA  while  loop should be used when the number of loop iterations is unknown .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis04/#code-tracing", 
            "text": "What does each main function ouptut?\nAssume all required libraries are included.  // 1\nint main() {\n    string Z =  Z ;\n    string a =  a ;\n\n    if (Z   a) {\n        cout    'Z' comes before 'a' lexicographically    endl;\n    }\n    else {\n        cout    'a' comes before 'Z' lexicographically    endl;\n    }\n\n    Z.append( ebra );\n    cout    Length =     Z.length()   endl;\n    cout    Size =     Z.size()   endl;\n\n    Z.clear();\n    cout    Length =     Z.size()   endl;\n\n    Z =  hello ;\n    cout   Z.at(0)   a   Z.at(2)   Z.at(4)   endl;\n\n    Z.insert(0, c );\n    cout   Z   endl;\n\n    cout   Z.substr(1,2)     is awesome.    endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int counter = 0;\n    int counter2 = 0;\n\n    for (int i = 0; i   5; i++) {\n        counter += 1;\n    }\n    cout   counter   endl;\n\n    for (int i = 0; i   4; i++) {\n        counter *= 2;\n    }\n    cout   counter   endl;\n\n    counter = counter / 10;\n\n    for (int i = 28; i   counter; i = i - 2) {\n        cout   counter2;\n        counter2++;\n    }\n    cout   endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    bool b = true;\n    int a = 0;\n\n    while (b) {\n        cout   a;\n        if (a == 5) {\n            b = false;\n        }\n        a++;\n    }\n    cout   endl;\n\n    a = 0;\n\n    while (!b) {\n        a++;\n        if (a == 5){\n            b = true;\n        }\n        cout   a   endl;\n    }\n\n    double d = 12345;\n\n    while (d  = 1) {\n        d = d / 10;\n    }\n    cout   d   endl;\n\n    string s =  Computer ;\n\n    while(s.size() != 0) {\n        cout   s   endl;\n        s.resize(s.size() - 1);\n    }\n\n    return 0;\n}\n\n// 4\n// FOR THESE QUESTIONS, how many times does each loop run?\nint main() {\n    // Loop A\n    for (int i = 0; i   10; i++) {\n        if (i   5) {\n            i *= 2;\n        }\n    }\n\n    int j = 10;\n\n    // Loop B\n    while (j != 0) {\n        if (j   0) {\n            j -= 3;\n        }\n        if (j   0) {\n            j += 5;\n        }\n    }\n\n    // Loop C\n    for (int i = 0; i   30; i++) {\n        if (i % 3 == 2) {\n            i += 10;\n        }\n        else if (i % 3 == 1) {\n            i *= 2;\n        }\n        else {\n            i /= 3;\n        }\n    }\n\n    return 0;\n}", 
            "title": "Code tracing"
        }, 
        {
            "location": "/lab04/", 
            "text": "Note\n\n\nYou do not need to complete bonus exercises.\nI recommend you attempt them, but if you are spending too long move to the next exercise.\n\n\nExercise 1\n\n\nGet a word from the user and print it back.\nEach print should have one less letter than the line before it.\nStop printing when there are no more characters in the string.\n\n\n[Bonus 1]: Get an entire line of text from the user.\n\n\n[Bonus 2]: Skip an extra amount for spaces you encounter.\nRead \nthis\n (warning: advanced), and checkout the bonus example below.\n\n\nExample:\n\n\n\n\nEnter a string: \nTest\n\nTest \n\nTes \n\nTe \n\nT\n\n\n\n\nBonus 2 Example:\n\n\n\n\nEnter a string: \nHey there!\n\nHey there\n\nHey ther\n\nHey the\n\nHey th\n\nHey t\n\nHey\n\nHe\n\nH\n\n\n\n\nAn \nincorrect\n version of bonus 2:\n\n\n\n\nEnter a string: \nHey there!\n\nHey there\n\nHey ther\n\nHey the\n\nHey th\n\nHey t\n\nHey\n\nHey\n\nHe\n\nH\n\n\n\n\n(notice the repetition)\n\n\nExercise 2\n\n\nGet two integers from the user and multiply them without using the \n*\n operator.\n\n\nExample:\n\n\n\n\nEnter two numbers: \n5 6\n\n5 * 6 = 30\n\n\n\n\nExercise 3\n\n\nWrite a program that prints a collatz conjecture sequence.\nThe collatz conjecture is defined as follows:\n\n\n\n\nTake any positive integer \nn\n\nIf \nn\n is even, divide it by two.\n\nIf \nn\n is odd, multiply it by 3 and add 1\n\nRepeat this until \nn == 1\n\n\n\n\nThe collatz conjecture states that no matter what \nn\n you choose, you will always end up at 1.\nNo one has found a number that does not satisfy this conjecture.\nNo one knows why.\n\n\nExample:\n\n\n\n\nEnter an integer: \n3\n\n10\n\n5\n\n16\n\n8\n\n4\n\n2\n\n1\n\n\n\n\nTake a look at the \ncollatz conjecture on wikipedia\n if you would like to read more about it.\n\n\nExercise 4\n\n\nWrite a program that takes a string and reverses it.\n\n\n[Bonus]: if it is a palindrome, output a sentnce saying so.\n\n\nExample 1:\n\n\n\n\nEnter a string: \nAndre Castro\n\nortsaC erdnA\n\n\n\n\nBonus Example:\n\n\n\n\nEnter a string: \nlionoil\n\nlionoil\n\nlionoil is a palindrome!\n\n\n\n\nExercise 5\n\n\nPassword-protect one of the previous exercises from this lab.\nThe user gets at least 5 attempts to guess the password before the program quits with a failure message.\nThe maximum number of tries is up to you.\nRead a single word as the password.\nOutput a hint if the user gets it wrong.\n\n\n[Bonus]: treat words with lowercase and uppercase letters the same.\n For instance, \nWorD\n and \nwoRd\n should both be considered correct.\n\n\nExample 1:\n\n\n\n\nEnter a word: \nTest\n \n\nThe word \"Test\" is incorrect. Hint: it is green.\n\nEnter another word: \nGrass\n\nThe word \"Grass\" is correct!\n\n\n\n\nExmaple 2:\n\n\n\n\nEnter a word: \nTemporary\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nSentence\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nStilts\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nSit\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nStow\n\nIm sorry. You failed to guesss the word. Goodbye.\n\n\n\n\nQuiz!\n\n\nquiz03", 
            "title": "Lab Week 4: Strings and loops"
        }, 
        {
            "location": "/lab04/#note", 
            "text": "You do not need to complete bonus exercises.\nI recommend you attempt them, but if you are spending too long move to the next exercise.", 
            "title": "Note"
        }, 
        {
            "location": "/lab04/#exercise-1", 
            "text": "Get a word from the user and print it back.\nEach print should have one less letter than the line before it.\nStop printing when there are no more characters in the string.  [Bonus 1]: Get an entire line of text from the user.  [Bonus 2]: Skip an extra amount for spaces you encounter.\nRead  this  (warning: advanced), and checkout the bonus example below.  Example:   Enter a string:  Test \nTest  \nTes  \nTe  \nT   Bonus 2 Example:   Enter a string:  Hey there! \nHey there \nHey ther \nHey the \nHey th \nHey t \nHey \nHe \nH   An  incorrect  version of bonus 2:   Enter a string:  Hey there! \nHey there \nHey ther \nHey the \nHey th \nHey t \nHey \nHey \nHe \nH   (notice the repetition)", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab04/#exercise-2", 
            "text": "Get two integers from the user and multiply them without using the  *  operator.  Example:   Enter two numbers:  5 6 \n5 * 6 = 30", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab04/#exercise-3", 
            "text": "Write a program that prints a collatz conjecture sequence.\nThe collatz conjecture is defined as follows:   Take any positive integer  n \nIf  n  is even, divide it by two. \nIf  n  is odd, multiply it by 3 and add 1 \nRepeat this until  n == 1   The collatz conjecture states that no matter what  n  you choose, you will always end up at 1.\nNo one has found a number that does not satisfy this conjecture.\nNo one knows why.  Example:   Enter an integer:  3 \n10 \n5 \n16 \n8 \n4 \n2 \n1   Take a look at the  collatz conjecture on wikipedia  if you would like to read more about it.", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab04/#exercise-4", 
            "text": "Write a program that takes a string and reverses it.  [Bonus]: if it is a palindrome, output a sentnce saying so.  Example 1:   Enter a string:  Andre Castro \nortsaC erdnA   Bonus Example:   Enter a string:  lionoil \nlionoil \nlionoil is a palindrome!", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/lab04/#exercise-5", 
            "text": "Password-protect one of the previous exercises from this lab.\nThe user gets at least 5 attempts to guess the password before the program quits with a failure message.\nThe maximum number of tries is up to you.\nRead a single word as the password.\nOutput a hint if the user gets it wrong.  [Bonus]: treat words with lowercase and uppercase letters the same.\n For instance,  WorD  and  woRd  should both be considered correct.  Example 1:   Enter a word:  Test   \nThe word \"Test\" is incorrect. Hint: it is green. \nEnter another word:  Grass \nThe word \"Grass\" is correct!   Exmaple 2:   Enter a word:  Temporary \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Sentence \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Stilts \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Sit \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Stow \nIm sorry. You failed to guesss the word. Goodbye.", 
            "title": "Exercise 5"
        }, 
        {
            "location": "/lab04/#quiz", 
            "text": "quiz03", 
            "title": "Quiz!"
        }, 
        {
            "location": "/dis05/", 
            "text": "Introduction\n\n\nA loop that appears in the body of another loop is often called a\n\nnested loop\n\n\nThe loops on the inside of a nested loop construct are called\n\ninner loops\n\nwhile the loop on the outside of a nested loop construct is called the\n\nouter loop\n\n\nBuilding a complex program by making small testable additions and changes is called \n\nincremental programming\n\n\nA loop construct that executes the body of the loop before checking the loop condition is called a\n\ndo-while loop\n\n\nDebugging Practice\n\n\nThe code below is supposed to continuously ask the user for a number and output the square of that number. When the user enters 0 the program should exit. Unfortunately, the program below doesn't even compile, although thats not the only problem...\n\n\nHow can you modify the following code so that it works correctly?\n\n\n#include \niostream\n\n\nusing namespace std;\n\nint main(){\n    int userInput = 0;\n\n    do{\n        cout \n \nEnter a number: \n;\n        cin \n input;\n        cout \n endl;\n\n        cout \n input \n \n * \n \n input \n \n == \n \n input * input \n endl; \n\n    }while(input \n 0)\n\n    return 0;\n}\n\n\n\n\nThe code below is supposed to output a word diagonally, but it doesn't seem to be working.\n\n\nFor example, when the user inputs \"hey\" the output should be:\n\n\nh\n\n\ne\n\n\ny\n\n\nBut instead the output is:\n\n\nh\ne\ny \n\n\nHow can you modify the following code so that it works correctly?\n\n\n#include \niostream\n\n\nusing namespace std;\n\nint main(){\n    string userInput;\n\n    cout \n \nEnter a string: \n;\n    getline(cin, userInput);\n    cout \n endl;\n\n    for(int i = 0; i \n userInput.size(); i++){\n        for(int j = 0; j \n userInput.size(); j++){\n            if(i == j){\n                cout \n userInput.at(i);\n            }\n            else{\n                cout \n ' ';\n            }\n        }\n    }\n    return 0;\n}\n\n\n\n\nCode Tracing\n\n\nFor the code below answer the following questions.\n\n\n\n\nWhat does this program output?\n\n\nWhat would happen if you switched the values of width and height? (That is, \nwidth == 13\n and \nheight == 2\n)\n\n\n\n\nint main(){\n    char start = 'a';\n    int width = 2;\n    int height = 13;\n\n    for(int i = 0; i \n height; i++){\n        for(int j = 0; j \n width; j++){\n            cout \n start \n ' ';\n            start++;\n        }\n        cout \n endl;\n    }\n\n    return 0;\n}\n\n\n\n\nFor the code below answer the following questions.\n\n\n\n\nWhat does the code output if the user enters 2. What about if the user enters a 3 or a 4? That is, what does the main function output in the seperate cases of \nuserInput == 2\n, \nuserInput == 3\n, and \nuserInput == 4\n.\n\n\nWhat mathematical function does each part represent? (refer to the comments in the code if you're unsure what is meant by 'part')\n\n\nWhat mathematical function would we have if we incremented the variable \nresult\n in \nn\n nested for-loops?\n\n\n\n\nint main(){\n    int userInput = 0;\n\n    cout \n \nEnter a number: \n;\n    cin \n userInput;\n    cout \n endl;\n\n    //PART 1\n    int result = 0;\n\n    for(int i = 0; i \n userInput; i++){\n        result++;\n    }\n\n    cout \n result \n endl;\n\n    //PART 2\n    result = 0;\n\n    for(int i = 0; i \n userInput; i++){\n        for(int j = 0; j \n userInput; j++){\n            reuslt++;\n        }\n    }\n\n    cout \n result \n endl;\n\n    //PART 3 \n    result = 0;\n\n    for(int i = 0; i \n userInput; i++){\n        for(int j = 0; j \n userInput; j++){\n            for(int k = 0; k \n userInput; k++){ \n                result++;\n            }\n        }\n    }\n\n    cout \n result \n endl;\n    result = 0;\n\n    return 0;\n}", 
            "title": "Discussion 5: Nested Loops and Do-While"
        }, 
        {
            "location": "/dis05/#introduction", 
            "text": "A loop that appears in the body of another loop is often called a nested loop  The loops on the inside of a nested loop construct are called inner loops \nwhile the loop on the outside of a nested loop construct is called the outer loop  Building a complex program by making small testable additions and changes is called  incremental programming  A loop construct that executes the body of the loop before checking the loop condition is called a do-while loop", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis05/#debugging-practice", 
            "text": "The code below is supposed to continuously ask the user for a number and output the square of that number. When the user enters 0 the program should exit. Unfortunately, the program below doesn't even compile, although thats not the only problem...  How can you modify the following code so that it works correctly?  #include  iostream \n\nusing namespace std;\n\nint main(){\n    int userInput = 0;\n\n    do{\n        cout    Enter a number:  ;\n        cin   input;\n        cout   endl;\n\n        cout   input     *     input     ==     input * input   endl; \n\n    }while(input   0)\n\n    return 0;\n}  The code below is supposed to output a word diagonally, but it doesn't seem to be working.  For example, when the user inputs \"hey\" the output should be:  h  e  y  But instead the output is:  h e y   How can you modify the following code so that it works correctly?  #include  iostream \n\nusing namespace std;\n\nint main(){\n    string userInput;\n\n    cout    Enter a string:  ;\n    getline(cin, userInput);\n    cout   endl;\n\n    for(int i = 0; i   userInput.size(); i++){\n        for(int j = 0; j   userInput.size(); j++){\n            if(i == j){\n                cout   userInput.at(i);\n            }\n            else{\n                cout   ' ';\n            }\n        }\n    }\n    return 0;\n}", 
            "title": "Debugging Practice"
        }, 
        {
            "location": "/dis05/#code-tracing", 
            "text": "For the code below answer the following questions.   What does this program output?  What would happen if you switched the values of width and height? (That is,  width == 13  and  height == 2 )   int main(){\n    char start = 'a';\n    int width = 2;\n    int height = 13;\n\n    for(int i = 0; i   height; i++){\n        for(int j = 0; j   width; j++){\n            cout   start   ' ';\n            start++;\n        }\n        cout   endl;\n    }\n\n    return 0;\n}  For the code below answer the following questions.   What does the code output if the user enters 2. What about if the user enters a 3 or a 4? That is, what does the main function output in the seperate cases of  userInput == 2 ,  userInput == 3 , and  userInput == 4 .  What mathematical function does each part represent? (refer to the comments in the code if you're unsure what is meant by 'part')  What mathematical function would we have if we incremented the variable  result  in  n  nested for-loops?   int main(){\n    int userInput = 0;\n\n    cout    Enter a number:  ;\n    cin   userInput;\n    cout   endl;\n\n    //PART 1\n    int result = 0;\n\n    for(int i = 0; i   userInput; i++){\n        result++;\n    }\n\n    cout   result   endl;\n\n    //PART 2\n    result = 0;\n\n    for(int i = 0; i   userInput; i++){\n        for(int j = 0; j   userInput; j++){\n            reuslt++;\n        }\n    }\n\n    cout   result   endl;\n\n    //PART 3 \n    result = 0;\n\n    for(int i = 0; i   userInput; i++){\n        for(int j = 0; j   userInput; j++){\n            for(int k = 0; k   userInput; k++){ \n                result++;\n            }\n        }\n    }\n\n    cout   result   endl;\n    result = 0;\n\n    return 0;\n}", 
            "title": "Code Tracing"
        }, 
        {
            "location": "/lab05/", 
            "text": "Exercise 1\n\n\nWrite a program that outputs a menu that asks the user to pick an option between 1 - 6.\nIf the option is 6 then the program should exit.\nOptions 1 - 5 will be for the exercises.\nIf the output is not in the range from 1 - 6 then the program should alert the user that the option is invalid and ask the user to enter another option.\n\n\nUntil you implement the other exercises simply do nothing if the user chooses 2 - 5.\nAll of the exercises for this week will go in this file.\n\n\nExample output:\n\n\n\n\nLab 05 Menu\n\n1. Do nothing\n\n2. Exercise 2\n\n3. Exercise 3\n\n4. Exercise 4\n\n5. Exercise 5\n\n6. Exit\n\n\nEnter your choice: \n1\n\n\nLab 05 Menu\n\n1. Do nothing\n\n2. Exercise 2\n\n3. Exercise 3\n\n4. Exercise 4\n\n5. Exercise 5\n\n6. Exit\n\n\nEnter your choice: \n7\n\nInvalid choice, try again.\n\nEnter your choice: \n6\n\n\nGoodbye!\n\n\n\n\nAnother example:\n\n\n\n\nLab 05 Menu\n\n1. Do nothing\n\n2. Exercise 2\n\n3. Exercise 3\n\n4. Exercise 4\n\n5. Exercise 5\n\n6. Exit\n\n\nEnter your choice: \n2\n\n\nExecuting exercise 2...\n\n(exercise 2 runs here)\n\n\nLab 05 Menu\n\n1. Do nothing\n\n2. Exercise 2\n\n3. Exercise 3\n\n4. Exercise 4\n\n5. Exercise 5\n\n6. Exit\n\n\nEnter your choice: \n6\n\n\nGoodbye!\n\n\n\n\nExercise 2\n\n\nAsk the user to enter a word that is exactly 3 characters long and output all permutations of the characters in the word.\nOutput 1 permutation of the word per line.\n\n\nExample output:\n\n\n\n\nEnter a 3 letter word: \nbug\n\nbbb\n\nbbu\n\nbbg\n\nbub\n\nbuu\n\nbug\n\nbgb\n\nbgu\n\nbgg\n\nubb\n\nubu\n\nubg\n\nuub\n\nuuu\n\nuug\n\nugb\n\nugu\n\nugg\n\ngbb\n\ngbu\n\ngbg\n\ngub\n\nguu\n\ngug\n\nggb\n\nggu\n\nggg\n\n\n\n\nNote that the order does not have to be exactly the same as above as long as all permutations are there (this order is the easiest, though).\n\n\nBonus\n\n\nAllow a string of 4 characters and output all permutations of that word with 4 words on each line.\n\n\nExercise 3\n\n\nAsk the user for a number and output the multiplication table up to and including that number.\n\n\nExample output:\n\n\n\n\nPlease enter a number: \n4\n\n1\n2\n3\n4\n\n2\n4\n6\n8\n\n3\n6\n9\n12\n\n4\n8\n12\n16\n\n\n\n\nBonus 1\n\n\nAdd row and column numbers to your output\n\n\nExample output for \nBonus 1\n:\n\n\n\n\nPlease enter a number: \n4\n\n\n1\n2\n3\n4\n\n1\n1\n2\n3\n4\n\n2\n2\n4\n6\n8\n\n3\n3\n6\n9\n12\n\n4\n4\n8\n12\n16\n\n\n\n\nBonus 2\n\n\nNotice in the table above that the table become more skewed as the numbers get larger.\nFix the problem by making the numbers right justified instead of left justified.\n\n\nExample output for \nBonus 2\n:\n\n\n\n\nPlease enter a number: \n4\n\n\n1\n2\n3\n4\n\n1\n1\n2\n3\n4\n\n2\n2\n4\n6\n8\n\n3\n3\n6\n9\n12\n\n4\n4\n8\n12\n16\n\n\n\n\nExercise 4\n\n\nAsk the user to enter an integer \nn\n and print out a diamond whose center width is equal to \n(2 * n) - 1\n.\n\n\nExample output:\n\n\n\n\nPlease enter an integer: \n3\n\n\n*\n\n\n***\n\n*****\n\n\n***\n\n\n*\n\n\n\n\nExercise 5\n\n\nAsk the user for an integer and output the factorial of that integer. Do not use multiplication.\n\n\nIn case you are unfamiliar with what the factorial function does, here is a brief definition:\n\n\n\n\n\n\nThe factorial of a number \nn\n, denoted \nn!\n, is given by \nn! == n * (n-1) * (n-2) * (n-3) * ... * 3 * 2 * 1\n\n\nThe special case of \nn == 0\n is defined as follows:\n\n\n0! == 1\n\n\n\n\n\n\nExample output:\n\n\n\n\nPlease enter an integer: \n5\n\n5! == 120\n\n\n\n\nBonus\n\n\nIf the user enters a negative or floating point number alert the user that their input is invalid and re-prompt the user.\n\n\nExample output 1 for \nBonus\n:\n\n\n\n\nPlease enter an integer: \n-1\n\nError: Invalid Input!\n\nPlease enter an integer: \n0\n\n1\n\n\n\n\nExample output 2 for \nBonus\n:\n\n\n\n\nPlease enter an integer: \n1.4\n\nError: Invalid Input!\n\nPlease enter an integer: \n3.0\n\n6", 
            "title": "Lab Week 5: Nested Loops and Do-While"
        }, 
        {
            "location": "/lab05/#exercise-1", 
            "text": "Write a program that outputs a menu that asks the user to pick an option between 1 - 6.\nIf the option is 6 then the program should exit.\nOptions 1 - 5 will be for the exercises.\nIf the output is not in the range from 1 - 6 then the program should alert the user that the option is invalid and ask the user to enter another option.  Until you implement the other exercises simply do nothing if the user chooses 2 - 5.\nAll of the exercises for this week will go in this file.  Example output:   Lab 05 Menu \n1. Do nothing \n2. Exercise 2 \n3. Exercise 3 \n4. Exercise 4 \n5. Exercise 5 \n6. Exit  Enter your choice:  1  Lab 05 Menu \n1. Do nothing \n2. Exercise 2 \n3. Exercise 3 \n4. Exercise 4 \n5. Exercise 5 \n6. Exit  Enter your choice:  7 \nInvalid choice, try again. \nEnter your choice:  6  Goodbye!   Another example:   Lab 05 Menu \n1. Do nothing \n2. Exercise 2 \n3. Exercise 3 \n4. Exercise 4 \n5. Exercise 5 \n6. Exit  Enter your choice:  2  Executing exercise 2... \n(exercise 2 runs here)  Lab 05 Menu \n1. Do nothing \n2. Exercise 2 \n3. Exercise 3 \n4. Exercise 4 \n5. Exercise 5 \n6. Exit  Enter your choice:  6  Goodbye!", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab05/#exercise-2", 
            "text": "Ask the user to enter a word that is exactly 3 characters long and output all permutations of the characters in the word.\nOutput 1 permutation of the word per line.  Example output:   Enter a 3 letter word:  bug \nbbb \nbbu \nbbg \nbub \nbuu \nbug \nbgb \nbgu \nbgg \nubb \nubu \nubg \nuub \nuuu \nuug \nugb \nugu \nugg \ngbb \ngbu \ngbg \ngub \nguu \ngug \nggb \nggu \nggg   Note that the order does not have to be exactly the same as above as long as all permutations are there (this order is the easiest, though).  Bonus  Allow a string of 4 characters and output all permutations of that word with 4 words on each line.", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab05/#exercise-3", 
            "text": "Ask the user for a number and output the multiplication table up to and including that number.  Example output:   Please enter a number:  4 \n1 2 3 4 \n2 4 6 8 \n3 6 9 12 \n4 8 12 16   Bonus 1  Add row and column numbers to your output  Example output for  Bonus 1 :   Please enter a number:  4  1 2 3 4 \n1 1 2 3 4 \n2 2 4 6 8 \n3 3 6 9 12 \n4 4 8 12 16   Bonus 2  Notice in the table above that the table become more skewed as the numbers get larger.\nFix the problem by making the numbers right justified instead of left justified.  Example output for  Bonus 2 :   Please enter a number:  4  1 2 3 4 \n1 1 2 3 4 \n2 2 4 6 8 \n3 3 6 9 12 \n4 4 8 12 16", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab05/#exercise-4", 
            "text": "Ask the user to enter an integer  n  and print out a diamond whose center width is equal to  (2 * n) - 1 .  Example output:   Please enter an integer:  3  *  *** \n*****  ***  *", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/lab05/#exercise-5", 
            "text": "Ask the user for an integer and output the factorial of that integer. Do not use multiplication.  In case you are unfamiliar with what the factorial function does, here is a brief definition:    The factorial of a number  n , denoted  n! , is given by  n! == n * (n-1) * (n-2) * (n-3) * ... * 3 * 2 * 1  The special case of  n == 0  is defined as follows:  0! == 1    Example output:   Please enter an integer:  5 \n5! == 120   Bonus  If the user enters a negative or floating point number alert the user that their input is invalid and re-prompt the user.  Example output 1 for  Bonus :   Please enter an integer:  -1 \nError: Invalid Input! \nPlease enter an integer:  0 \n1   Example output 2 for  Bonus :   Please enter an integer:  1.4 \nError: Invalid Input! \nPlease enter an integer:  3.0 \n6", 
            "title": "Exercise 5"
        }, 
        {
            "location": "/dis06/", 
            "text": "Introduction\n\n\nMock Midterm", 
            "title": "Discussion 6: Midterm Preparation"
        }, 
        {
            "location": "/dis06/#introduction", 
            "text": "Mock Midterm", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab06/", 
            "text": "Exercise 1\n\n\nWrite a program that prints as many random numbers as the user asks for.\nThe user will provide the range.\n\n\nExample:\n\n\n\n\nHow many random numbers would you like? \n4\n\nWhat range should the numbers be in (space-separated)? \n-3 3\n\nYour random numbers are:\n\n-2\n\n3\n\n1\n\n-1\n\n\n\n\nBonus\n:\nAllow the user to enter the numbers in the wrong order.\nFor instance, they could enter \n3 -3\n and your program would output numbers in \n[-3, 3]\n.\n\n\nExercise 2\n\n\nOutput a sideways \"skyline\" with random building heights.\nDo not print an empty line as part of the skyline.\n\n\nExample:\n\n\n\n\nHow many buildings? \n7\n\nHow tall is the tallest building? \n9\n\n\n\nXXXXXXX\n\nXXX\n\nXXXX\n\nX\n\nXXXXXXXXX\n\nXXXX\n\nXXXX\n\n\n\n\nExercise 3\n\n\nExercise 4", 
            "title": "Lab Week 6: Randomness"
        }, 
        {
            "location": "/lab06/#exercise-1", 
            "text": "Write a program that prints as many random numbers as the user asks for.\nThe user will provide the range.  Example:   How many random numbers would you like?  4 \nWhat range should the numbers be in (space-separated)?  -3 3 \nYour random numbers are: \n-2 \n3 \n1 \n-1   Bonus :\nAllow the user to enter the numbers in the wrong order.\nFor instance, they could enter  3 -3  and your program would output numbers in  [-3, 3] .", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab06/#exercise-2", 
            "text": "Output a sideways \"skyline\" with random building heights.\nDo not print an empty line as part of the skyline.  Example:   How many buildings?  7 \nHow tall is the tallest building?  9  \nXXXXXXX \nXXX \nXXXX \nX \nXXXXXXXXX \nXXXX \nXXXX", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab06/#exercise-3", 
            "text": "", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab06/#exercise-4", 
            "text": "", 
            "title": "Exercise 4"
        }
    ]
}